// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id            String     @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  sessionss     Sessions[]
  accountss     Accounts[]
  role          UserRole   @default(USER)
  sidebar       SidebarUser[]
  active        Boolean    @default(false)


  @@unique([email])
  @@index([role])
  @@index([active])
  @@map("users")    
}

model Sessions {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Accounts {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  users                 Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
  CREATOR
}

model Sidebar {
  id        String   @id @default(cuid())
  labelEn   String
  labelRu   String
  href      String   @unique
  icon      String?
  parentId  String?  
  parent    Sidebar? @relation("ParentChild", fields: [parentId], references: [id], onDelete: SetNull)
  children  Sidebar[] @relation("ParentChild")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users SidebarUser[] // pivot table
  @@map("sidebar")
}

model SidebarUser {
  id            String   @id @default(cuid())
  userId        String
  sidebarItemId String
  user          Users    @relation(fields: [userId], references: [id])
  sidebarItem   Sidebar  @relation(fields: [sidebarItemId], references: [id])

  @@unique([userId, sidebarItemId])
  @@index([userId])
  @@map("sidebar_user")
}

model GroupCodes {
  id        String   @id @default(cuid())
  code      String   @unique
  labelEn   String
  labelRu   String

  codes Codes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("group_codes")
  @@index([code])
}

model Codes {
  id        String   @id @default(cuid())
  code      String   @unique
  labelEn   String
  labelRu   String
  groupCodeId String

  groupCode GroupCodes @relation(fields: [groupCodeId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("codes")
  @@index([code])
  @@index([groupCodeId])
}


  

model Applicant {
  id                  String   @id @default(cuid())
  userId              String   @unique // Enforce 6-char format in app/migration

  firstName           String   @map("first_name")
  lastName            String   @map("last_name")
  middleName          String?  @map("middle_name")
  gender              Gender   @default(MALE)

  passportNumber      String   @map("passport_number") // Encrypt in DB/app
  passportPhoto       String   // URL to secure storage (e.g., S3)

  phoneNumber         String   @map("phone_number")
  phoneNumberAdditional String? @map("phone_number_additional")
  email               String   // Made required for contact

  // Address structured for better querying
  countryOfResidence  String   @map("country_of_residence") // Use enum if possible
  addressLine1        String   @map("address_line_1") // Main street
  addressLine2        String?  @map("address_line_2") // Details/apt
  city                String?  @map("city")
  state               String?  @map("state")
  zipCode             String?  @map("zip_code")

  nationality         String?  // ISO code or full name
  dateOfBirth         DateTime? // For age/eligibility checks
  preferredJobTitle   String?  @default("Worker")  // Quick filter for matching

  countryOfEmployment String   @map("country_of_employment")
  partner             String   // e.g., recruiting agency

  status              ApplicantStatus @default(NEW)
  languages           String[] @map("languages")

  // Relations
  work                Work[]
  files               File[]
  visa                Visa[]

  // Audit
  createdBy           String   @default("System") // Ideally set to user ID
  updatedBy           String   @default("System")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isArchived          Boolean  @default(false) // For soft deletes

  @@map("applicants")
  @@index([userId])
  @@index([countryOfEmployment])
  @@index([partner])
  @@index([isArchived])    // New: for active applicant lists
}


enum ApplicantStatus {
  NEW                  // Just applied 
  IN_PROGRESS  // Currently being processed
  CONFIRMED_PROGRAM // Accepted into internship/training program

  // Outcomes
  HIRED              // Hired by hotel
  HOTEL_REJECTED   // Refused by hotel
  APPLICANT_REJECTED // Applicant refused/withdrews
  FIRED              // Hired but later fired
}


enum VisaStatus {
  STILL_WORKING
  RETURNED
  DEPARTED
}

enum Gender {
  MALE
  FEMALE
}

model Visa {
  id              String      @id @default(cuid())
  applicantId     String      @map("applicant_id")
  applicant       Applicant   @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  
  issued          Boolean     @default(false)
  issueDate       DateTime?   @map("issue_date") // When visa was issued
  departureDate   DateTime?   @map("departure_date") // Only if issued
  arrived         Boolean     @default(false)
  status          VisaStatus  @default(STILL_WORKING) // still_working, returned, departed
  flightDocuments String[]     @map("flight_documents") // URL to flight docs (e.g., S3)
  
  files           File[]      // Related uploaded files (e.g., visa copy)

  createdBy       String      @default("System")
  updatedBy       String      @default("System")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("visas")
  @@index([applicantId])
  @@index([status])
}


model Work {
  id              String    @id @default(cuid())
  applicantId     String    @map("applicant_id")
  applicant       Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  
  jobTitle        String    @map("job_title") // e.g., "Software Engineer"
  company         String    @map("company") // e.g., "Tech Corp"
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date") // Null if current
  responsibilities String    @map("responsibilities") // Text description
  achievements    String?   @map("achievements") // Optional text for key wins
  location        String?   @map("location") // e.g., "New York, NY"

  createdBy       String    @default("System")
  updatedBy       String    @default("System")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("work_history")
  @@index([applicantId])
}

enum FileType {
  PASSPORT
  VISA
  CV
  INSURANCE
  FLIGHT_DOCUMENT
  OTHER
}

model File {
  id              String    @id @default(cuid())
  applicantId     String    @map("applicant_id")
  applicant       Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  visaId          String?   @map("visa_id")
  visa            Visa?     @relation(fields: [visaId], references: [id], onDelete: SetNull)
  
  fileType        FileType  @map("file_type") // e.g., PASSPORT, VISA, CV
  fileUrl         String    @map("file_url") // URL to file in storage (e.g., S3)
  fileName        String    @map("file_name") // Original file name
  fileSize        Int?      @map("file_size") // Size in bytes
  mimeType        String?   @map("mime_type") // e.g., "application/pdf"

  createdBy       String    @default("System")
  updatedBy       String    @default("System")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("files")
  @@index([applicantId])
  @@index([visaId])
  @@index([fileType])
}