generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Users {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  role          UserRole      @default(EDITOR)
  active        Boolean       @default(false)
  accountss     Accounts[]
  alerts        Alert[]
  comments      Comment[]
  sessionss     Sessions[]
  sidebar       SidebarUser[]

  @@index([active])
  @@map("users")
}

model Sessions {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Accounts {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  users                 Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id            String        @id @default(cuid())
  identifier    String
  value         String
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("verification")
}

model Sidebar {
  id        String        @id @default(cuid())
  labelEn   String
  labelRu   String
  href      String        @unique
  icon      String?
  parentId  String?
  order     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    Sidebar?      @relation("ParentChild", fields: [parentId], references: [id])
  children  Sidebar[]     @relation("ParentChild")
  users     SidebarUser[]

  @@map("sidebar")
}

model SidebarUser {
  id            String  @id @default(cuid())
  userId        String
  sidebarItemId String
  sidebarItem   Sidebar @relation(fields: [sidebarItemId], references: [id])
  user          Users   @relation(fields: [userId], references: [id])

  @@unique([userId, sidebarItemId])
  @@index([userId])
  @@map("sidebar_user")
}

model GroupCodes {
  id        String   @id @default(cuid())
  code      String   @unique
  labelEn   String
  labelRu   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  codes     Codes[]

  @@index([code])
  @@map("group_codes")
}

model Codes {
  id          String     @id @default(cuid())
  code        String     @unique
  labelEn     String
  labelRu     String
  groupCodeId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  groupCode   GroupCodes @relation(fields: [groupCodeId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([groupCodeId])
  @@map("codes")
}

model Applicant {
  id                    String          @id @default(cuid())
  userId                String          @unique
  firstName             String          @map("first_name")
  lastName              String          @map("last_name")
  middleName            String?         @map("middle_name")
  gender                Gender          @default(MALE)
  passportNumber        String          @map("passport_number")
  phoneNumber           String          @map("phone_number")
  phoneNumberAdditional String?         @map("phone_number_additional")
  email                 String?
  countryOfResidence    String          @map("country_of_residence")
  addressLine1          String          @map("address_line_1")
  addressLine2          String?         @map("address_line_2")
  city                  String?         @map("city")
  state                 String?         @map("state")
  zipCode               String?         @map("zip_code")
  nationality           String?
  dateOfBirth           DateTime?
  preferredJobTitle     String?         @default("Worker")
  countryOfEmployment   String          @map("country_of_employment")
  partner               String
  status                ApplicantStatus @default(NEW)
  languages             String[]        @map("languages")
  workplace             String?         
  createdBy             String          @default("System")
  updatedBy             String          @default("System")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  isArchived            Boolean         @default(false)
  isAlert               Boolean         @default(false)
  alerts                Alert[]
  comments              Comment[]
  files                 File[]
  visa                  Visa[]
  work                  Work[]

  @@index([userId])
  @@index([countryOfEmployment])
  @@index([partner])
  @@index([isArchived])
  @@index([isAlert])
  @@map("applicants")
}

model Visa {
  id            String     @id @default(cuid())
  applicantId   String     @map("applicant_id")
  issued        Boolean    @default(false)
  issueDate     DateTime?  @map("issue_date")
  departureDate DateTime?  @map("departure_date")
  arrived       Boolean    @default(false)
  arrivalDate   DateTime?  @map("arrival_date")
  status        VisaStatus @default(STILL_WORKING)
  returnedDate  DateTime?  @map("returned_date")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  applicant     Applicant  @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([status])
  @@map("visas")
}

model Work {
  id               String    @id @default(cuid())
  applicantId      String    @map("applicant_id")
  jobTitle         String    @map("job_title")
  company          String    @map("company")
  startDate        DateTime  @map("start_date")
  endDate          DateTime? @map("end_date")
  responsibilities String    @map("responsibilities")
  achievements     String?   @map("achievements")
  location         String?   @map("location")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  applicant        Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@map("work_history")
}

model File {
  id          String    @id @default(cuid())
  applicantId String    @map("applicant_id")
  fileType    FileType  @map("file_type")
  fileKey     String    @map("file_key")
  fileName    String    @map("file_name")
  fileSize    Int?      @map("file_size")
  mimeType    String?   @map("mime_type")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([fileType])
  @@map("files")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  applicantId String    @map("applicant_id")
  authorId    String    @map("author_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alerts      Alert[]
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  author      Users     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([authorId])
  @@map("comments")
}

model Alert {
  id          String     @id @default(cuid())
  commentId   String     @map("comment_id")
  userId      String     @map("user_id")
  isRead      Boolean    @default(false) @map("is_read")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  applicantId String    @map("applicant_id")
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  comment     Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@index([isRead])
  @@map("alerts")
}

enum FileType {
  PASSPORT
  VISA
  CV
  INSURANCE
  FLIGHT_DOCUMENT
  OTHER
}

enum ApplicantStatus {
  NEW
  IN_PROGRESS
  CONFIRMED_PROGRAM
  HIRED
  HOTEL_REJECTED
  APPLICANT_REJECTED
  FIRED
}

enum VisaStatus {
  NOT_APPLIED
  STILL_WORKING
  RETURNED
  DEPARTED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  EDITOR
  ADMIN
  CREATOR
}
